{"version":3,"file":"static/js/834.cc592212.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/crypto.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/utils.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_u64.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha512.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/ed25519.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha3.ts","../node_modules/@solana/web3.js/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@toruslabs/tweetnacl-js/nacl-fast.js","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack: pack,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bytes","_len","lengths","_key","includes","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","u8a","a","createView","arr","DataView","byteLength","rotr","Uint32Array","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","r","pad","forEach","set","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","SHA2","padOffset","isLE","super","pos","view","len","take","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","lst","le","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_1n","_2n","hexes","_","padStart","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","_len2","_key2","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","mod","result","num","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","constTimeNegate","condition","item","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","static","toInv","fromAffine","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","normalizeZ","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","normed","lastByte","y2","isXOdd","isLastByteOdd","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","R","verify","sig","publicKey","SB","fromHex","error","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","FpSqrtEven","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","W2","s0","s1","Chi","sha256","StructError","failure","failures","cached","message","rest","path","join","_cached","isObject","print","JSON","stringify","toFailure","struct","branch","refinement","toFailures","Symbol","iterator","run","coerce","coercer","schema","valid","validator","ts","t","Set","refiner","Struct","props","assert","validate","is","tuples","tuple","input","done","next","shiftIterator","define","Element","Class","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","keys","Structs","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","HMAC","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","weierstrass","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","fromPrivateKey","getSharedSecret","privateA","publicB","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","_class","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","every","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","MS_PER_SLOT","SendTransactionError","logs","SolanaJSONRPCError","_ref13","customMessage","code","fetch","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","LogsResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","authority","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","nacl","gf","init","Float64Array","randombytes","_0","_9","gf0","gf1","_121665","D2","ts64","vn","xi","yi","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","inp","o","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","core_salsa20","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","mpos","crypto_stream_salsa20","crypto_stream","sn","crypto_stream_xor","poly1305","t6","t7","Uint16Array","leftover","fin","crypto_onetimeauth","outpos","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","car25519","sel25519","pack25519","neq25519","par25519","unpack25519","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b7","b8","b12","b13","b14","b15","inv25519","pow2523","crypto_scalarmult","x32","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","blocks","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","want","crypto_box_afternm","crypto_box_open_afternm","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","Int32Array","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","crypto_hash","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","carry","crypto_sign","sm","smlen","crypto_sign_open","chk","den","den2","den4","den6","unpackneg","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_secretbox_BOXZEROBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_NONCEBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","checkLengths","checkArrayTypes","cleanup","lowlevel","crypto_box","crypto_box_open","crypto_secretbox_ZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_BEFORENMBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","secretbox","open","box","keyLength","nonceLength","overheadLength","scalarMult","scalarLength","groupElementLength","before","checkBoxLengths","after","keyPair","publicKeyLength","secretKeyLength","sharedKeyLength","signedMsg","mlen","detached","fromSeed","seedLength","signatureLength","hashLength","setPRNG","fn","self","msCrypto","getRandomValues","module","_Buffer","ALPHABET","BASE_MAP","charAt","xc","charCodeAt","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","obj","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","emit","a3","a4","a5","removeListener","on","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","request","method","callback","isBatch","hasCallback","response","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","WebSocketBrowserImpl","_EventEmitter","_super","protocols","_this","socket","WebSocket","onopen","onmessage","onerror","onclose","reason","optionsOrCallback","cb","send","close","addEventListener","rnds8","rng","REGEX","byteToHex","toLowerCase","rnds","random","ReferenceError","asyncGeneratorStep","reject","_next","_throw","arg","info","then","Constructor","toPropertyKey","_defineProperties","descriptor","configurable","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","_typeof","assertThisInitialized","_regeneratorRuntime","asyncIterator","wrap","Generator","Context","makeInvokeMethod","tryCatch","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","displayName","isGeneratorFunction","mark","awrap","pop","prev","stop","rval","handle","complete","delegateYield","hint","prim","toPrimitive","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","end_of_stream","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}