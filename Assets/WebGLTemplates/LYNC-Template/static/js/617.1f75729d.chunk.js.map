{"version":3,"file":"static/js/617.1f75729d.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/modal/node_modules/@toruslabs/openlogin-ed25519/src/utils.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/modal/node_modules/base-x/src/index.js","../node_modules/@web3auth/modal/node_modules/bs58/index.js"],"sourcesContent":["import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(\n  providerConfig: Omit<CustomChainConfig, \"chainNamespace\">\n): JRPCMiddleware<unknown, Omit<CustomChainConfig, \"chainNamespace\">> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware as JRPCMiddleware<unknown, unknown>]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<T, U> {\n  return createAsyncMiddleware<T, U>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { getED25519Key } from \"@toruslabs/openlogin-ed25519\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw providerErrors.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<never, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public getEd25519Key(privateKey: string): string {\n    return getED25519Key(privateKey).sk.toString(\"hex\").padStart(128, \"0\");\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<never, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<[], string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.emit(\"chainChanged\", this.state.chainId);\n      this.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw rpcErrors.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<[string, { encoding: string; preflightCommitment: string }], string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n"],"names":["l","nacl","createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","async","request","response","Error","accounts","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","SolanaPrivateKeyProvider","BaseProvider","constructor","config","state","super","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","this","privateKey","providerErrors","message","code","setupProvider","_providerEngineProxy","getEd25519Key","privKey","Buffer","from","d","Uint8Array","p","gf","sk","pk","crypto_hash","scalarbase","pack","i","getED25519Key","toString","padStart","getProviderEngineProxy","WalletInitializationError","keyPair","Keypair","publicKey","toBase58","bs58","secretKey","_req$params","params","rpcErrors","transaction","undefined","version","VersionedTransaction","sign","partialSign","_req$params2","_req$params3","signature","serialize","encoding","preflightCommitment","_req$params4","_req$params5","_req$params6","length","txns","tx","getProviderHandlers","bind","solanaMiddleware","engine","JRPCEngine","networkMiddleware","rpcTarget","fetchMiddleware","createFetchMiddleware","createJsonRpcClient","push","getChainSwitchMiddleware","getAccountMiddleware","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","emit","getChainConfig","update","configure","health","_ref3","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","decimals","switchChain","_ref4","updatePrivatekey","createAccountMiddleware","updateAccount","_class","_defineProperty","providerFactory","module","exports","ALPHABET","TypeError","BASE_MAP","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require"],"sourceRoot":""}