{"version":3,"file":"static/js/610.06d7500e.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/modal/node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<[string, string], string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends IProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    const { ethereum } = window as any;\n    const isPhantom = Boolean(\"isPhantom\" in ethereum);\n    // check which is the active provider\n    if (ethereum && ethereum.isMetaMask && isPhantom) {\n      // this means phantom is the active provider.\n      if (ethereum.providers && ethereum.providers.length > 0) {\n        const provider = ethereum.providers.find((p: any) => p.isMetaMask && !p.overrideIsMetaMask);\n\n        if (provider) {\n          ethereum.setProvider(provider);\n        }\n      }\n    } else if (ethereum && (ethereum.providers || []).length > 0) {\n      // this means that there are another providers than metamask (like coinbase).\n      const provider = ethereum.providers.find((p: any) => p.isMetaMask);\n      if (provider) {\n        ethereum.setSelectedProvider(provider);\n      }\n    }\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.addChain(this.chainConfig as CustomChainConfig, true);\n        await this.switchChain(this.chainConfig as CustomChainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        // ready to be connected again\n        this.disconnect();\n        this.provider?.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: params.chainId }],\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","exports","mustBeMetaMask","silent","timeout","arguments","length","undefined","Error","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","BaseEvmAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","provider","status","ADAPTER_STATUS","WalletLoginError","chainNamespace","chainId","accounts","request","method","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","params","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","MetamaskAdapter","constructor","_defineProperty","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","options","init","checkInitializationRequirements","detectEthereumProvider","WalletInitializationError","log","autoConnect","connect","checkConnectionRequirements","isPhantom","Boolean","providers","find","p","overrideIsMetaMask","setProvider","setSelectedProvider","adapter","addChain","switchChain","disconnectHandler","_this$provider","disconnect","removeListener","on","reconnected","Web3AuthError","_this$provider2","cleanup","disconnectSession","removeAllListeners","_this$metamaskProvide","checkAddChainRequirements","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","decimals","addChainConfig","_this$metamaskProvide2","checkSwitchChainRequirements","setAdapterSettings"],"sourceRoot":""}